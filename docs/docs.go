// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/tasks": {
            "get": {
                "description": "Get a list of all tasks sorted by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "List all tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.taskEntry"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new task to the list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task to add",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.parameters"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/main.taskEntry"
                        }
                    },
                    "400": {
                        "description": "task content cannot be empty",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid json payload",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks/{taskID}": {
            "get": {
                "description": "Get details of a specific task by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a task by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.taskEntry"
                        }
                    },
                    "400": {
                        "description": "taskID parameter is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "task does not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing task by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task information",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.taskEntry"
                        }
                    },
                    "400": {
                        "description": "taskID parameter not supplied or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "task not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid json payload",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a task by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.taskEntry"
                        }
                    },
                    "400": {
                        "description": "taskID parameter not supplied or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "task not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.parameters": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "string"
                }
            }
        },
        "main.taskEntry": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "task": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Simple Task API",
	Description:      "Task/To-Do management API. This API allows you to create, read, update, and delete tasks.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
